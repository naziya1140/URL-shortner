there will be 2 options--->
1. signup-->add new entry, name email password --> move to url page.
2. login--> email, password --> fetch user data and match with previous data.
--> authenticate user and give entry.

--> both move to common url page where a person can see following things.
1. previous links created--> options to delete the links.
2. a form that takes url and give qr or another links.

as soon as you add a new link it will be added to the db url
and keep on updating according to the number of visits.

a user will have access to his data only --> 
this may require linking of email id o

views--> index.ejs
name,email id, password.
create a user dbs schema---> store name, email id with password.

add data in it during signup-- and fetch data from it using login.

then and catch is used to handle promise.
try and catch is used to handle error but we have used in await because, await don't have any catching thing so we give it in try and catch. 

The redirect will work from the port, where the listening is happening.

about render and redirect:--> you can use render of the same page which you are in currently.
and redirect is used when you want to jump to another page, url will also change there.
The page redirects to the another page, then send approprite data there from new.


The issue is in your redirect path. When you use res.redirect('url'), it's treating it as a relative path from your current route (users), so it becomes /users/url. You need to use an absolute path starting with / to redirect to the root URL route.

Let me fix that:

return res.redirect(dsflkdsjf)
this will make sure the function ends execution, 
after redirecting. and /user--> abs path
user ---> relative path.


A cookie is a very small text file placed on an internet user's hard drive. It is generated by a web page server, which is basically the computer that operates a website. The information the cookie contains is set by the server and it can be used by that server whenever the user visits the site. A cookie can be thought of as an internet user's identification card, which tell a website when the user has returned.

 Cookies are small files of information that a web server generates and sends to a web browser. Web browsers store the cookies they receive for a predetermined period of time, or for the length of a user's session on a website. They attach the relevant cookies to any future requests the user makes of the web server.


 Session Verification:
When a user logs in or signs up, you create a session ID and store it in a cookie
Having a cookie alone isn't secure - anyone could create a fake cookie
The getUserbySessionId function checks if this session ID is valid by looking it up in your sessionIdMap
It returns the user object associated with that session ID


here the logout button is connected with the fetch that sends get method to the users/logout page which then run the funciton connected to get method of the route, then this function returns response like ok, 200 or 400 
now the fetch receives this promise and with the help of document it jumps to the required page(mainpage).
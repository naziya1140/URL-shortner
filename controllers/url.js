import { nanoid } from "nanoid";
import { urlData } from "../models/url.js";//importing collection.
// ./ ---> finds in the same directory as of this file.
// ../ ---> finds in one level up


import dotenv from 'dotenv';
dotenv.config();
const domain = process.env.DOMAIN;
const PORT = process.env.PORT || 8000;


//This is for adding new url.
async function HandleInsertNewUrl(req, res) {
    try {
        if (!req.body.url) return res.status(400).json('Please enter a url');
        // if(!validator.isUrl(req.body.url)) return res.status.json('Enter a Valid URL');
 
        const nanoId = nanoid(8);
        let createdUrl = `${domain}/${nanoId}`;
        const original = req.body.url;
        
        //if the same thing has been searched before then give that instead of adding it again in the list(generated by same person)
        const prevUrl = await urlData.findOne({oldUrl: original, generatedBy: req.user._id})
        
        if(!prevUrl){
            //if not previously searched URL create new data.
            const newDoc = {
                newUrl: createdUrl,
                oldUrl: original,
                visitedHistory: [],
                generatedBy: req.user._id
            }
            await urlData.create(newDoc);
            // const urlHistory = await urlData.find({generatedBy: req.user._id});
            // return res.status(201).render("url", { id: createdUrl, urlDetail: urlHistory});
        }
        else{
            //set prevURL generated URL as current.
            createdUrl = prevUrl.newUrl;
        }
        
        return res.redirect(`/url?generated=${encodeURIComponent(createdUrl)}`);
        // const urlHistory = await urlData.find({generatedBy: req.user._id});
        // return res.status(201).render("url", { id: prevUrl.newUrl, urlDetail: urlHistory});
    }
    catch (e) {
        res.render('login', {error: null, success: null});
    }
}

async function getPage(req, res) {
    try{
        const generatedId = req.query.generated || null;

        const previousUrls = await urlData.find({generatedBy: req.user._id});
        return res.status(200).render('url', { id: generatedId , urlDetail: previousUrls, error: null, success: null});
    }
    catch{
        return res.status(400).render('url', { error: 'Error occurred while fetching URL data', success:null, id: null , urlDetail: null});
    }
}

export {
    HandleInsertNewUrl,
    getPage
}